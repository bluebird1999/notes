--------------------------------------------------LINUX I2C Structure--------------------------------------------------

* There are three layers for linux i2c driver system:
	1. I2C-Core layer, whihc is hardware/software independent, the file is in /drivers/i2c/i2c-core.c
	2. I2C-Adapter layer, the adapter is CPU specific, one adapter is coresponding to one I2C controller. Normally it also
		contains an algorithm module, which implements the hardware register control, write/read operations. The file is in
		/drivers/i2c/busses/...., for MXC, its the file mxc_i2c.c
	3. I2C-Device layer. Mainly includes two structure:

			---/include/linux/i2c.h---
			struct i2c_client {
				unsigned short flags;		/* div., see below		*/
				unsigned short addr;		/* chip address - NOTE: 7bit	*/
								/* addresses are stored in the	*/
								/* _LOWER_ 7 bits		*/
				char name[I2C_NAME_SIZE];
				struct i2c_adapter *adapter;	/* the adapter we sit on	*/
				struct i2c_driver *driver;	/* and our access routines	*/
				struct device dev;		/* the device structure		*/
				int irq;			/* irq issued by device		*/
				struct list_head detected;
			};

			---/include/linux/i2c.h---
			struct i2c_driver {
				int id;
				unsigned int class;

				/* Notifies the driver that a new bus has appeared or is about to be
				 * removed. You should avoid using this if you can, it will probably
				 * be removed in a near future.
				 */
				int (*attach_adapter)(struct i2c_adapter *);
				int (*detach_adapter)(struct i2c_adapter *);

				/* Standard driver model interfaces */
				int (*probe)(struct i2c_client *, const struct i2c_device_id *);
				int (*remove)(struct i2c_client *);

				/* driver model interfaces that don't relate to enumeration  */
				void (*shutdown)(struct i2c_client *);
				int (*suspend)(struct i2c_client *, pm_message_t mesg);
				int (*resume)(struct i2c_client *);

				/* a ioctl like command that can be used to perform specific functions
				 * with the device.
				 */
				int (*command)(struct i2c_client *client, unsigned int cmd, void *arg);

				struct device_driver driver;
				const struct i2c_device_id *id_table;

				/* Device detection callback for automatic device creation */
				int (*detect)(struct i2c_client *, int kind, struct i2c_board_info *);
				const struct i2c_client_address_data *address_data;
				struct list_head clients;
			};

			---/include/linux/i2c.h---
			struct i2c_msg {
				__u16 addr;	/* slave address			*/
				__u16 flags;
			#define I2C_M_TEN		0x0010	/* this is a ten bit chip address */
			#define I2C_M_RD		0x0001	/* read data, from slave to master */
			#define I2C_M_NOSTART		0x4000	/* if I2C_FUNC_PROTOCOL_MANGLING */
			#define I2C_M_REV_DIR_ADDR	0x2000	/* if I2C_FUNC_PROTOCOL_MANGLING */
			#define I2C_M_IGNORE_NAK	0x1000	/* if I2C_FUNC_PROTOCOL_MANGLING */
			#define I2C_M_NO_RD_ACK		0x0800	/* if I2C_FUNC_PROTOCOL_MANGLING */
			#define I2C_M_RECV_LEN		0x0400	/* length will be first received byte */
				__u16 len;		/* msg length				*/
				__u8 *buf;		/* pointer to msg data			*/
			};
