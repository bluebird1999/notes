
--------------------------------------------LINUX KERNEL------------------------------------------


* Add BUG() or BUG_ON( expression ) will make linux output "oops..." and halt.

* Add low-level debug information output function
	a. Config the low-level printk
		In menuconfig, enable "Kernel Hacking"=>"Kernel Debugging"=>"Kernel low-level debugging function (new)"
		In "config" file, set "CONFIG_LL_DEBUG"
	
	b. Enable the printk early buffer output
		In "/kernel/printk.c", applying the following patch:

		----------------------------------------------------------------------------------
			*** 573,578 ****
			--- 573,581 ----
			   * See the vsnprintf() documentation for format string extensions over C99.
			   */
			  
			+ extern void printascii(const char*);
			+ static char printk_buf[1024];
			+ 
			  asmlinkage int printk(const char *fmt, ...)
			  {
			  	va_list args;
			***************
			*** 582,587 ****
			--- 585,591 ----
			  	r = vprintk(fmt, args);
			  	va_end(args);
			  
			+ 	printascii(printk_buf);
			  	return r;
			  }
			  
			***************
			*** 638,644 ****
			  		KERN_CRIT "BUG: recent printk recursion!\n";
			  static int recursion_bug;
			  static int new_text_line = 1;
			! static char printk_buf[1024];
			  
			  asmlinkage int vprintk(const char *fmt, va_list args)
			  {
		----------------------------------------------------------------------------------

		In "/init/main.c", applying the following patch:

		----------------------------------------------------------------------------------
		--- 547,560 ----
		  	vmalloc_init();
		  }

		+ extern void printascii(const char*);
		+ 
		  asmlinkage void __init start_kernel(void)
		  {
		  	char * command_line;
		  	extern struct kernel_param __start___param[], __stop___param[];
		  
		  	smp_setup_processor_id();
		  	/*
		  	 * Need to run as early as possible, to initialize the
		  	 * lockdep hash:
		***************
		----------------------------------------------------------------------------------

	c. Early output in the "/arch/arm/kernel/head.S" file, applying the following patch:

		----------------------------------------------------------------------------------
		--- 189,198 ----
		   */
		  	.align	5
		  __turn_mmu_on:
		+ 	mov	r9, r0
		+ 	mov 	r0, #55
		+ 	bl 	printascii
		+ 	mov	r0, r9
		  	mov	r0, r0
		  	mcr	p15, 0, r0, c1, c0, 0		@ write control reg
		  	mrc	p15, 0, r3, c0, c0, 0		@ read id reg
		----------------------------------------------------------------------------------



















--------------------------------------------------C/C++/ASM----------------------------------------


* Different instructions for different IO space

	For I/O registers located in extended I/O map, "IN", "OUT", "SBIS","SBIC", "CBI", and "SBI" 
	instructions must be replaced with instructions that allow access to extended I/O.
	Typically "LDS" and "STS" combined with "SBRS", "SBRC", "SBR", and "CBR"."


* Port bit sets

	X |=  (1 << Bitnumber); // a bit in x is set
	X &= ~(1 << Bitnumber); // a bit is deleted in x
	Assembly:
	ori X, (1<<Bitnumber1) | (1<<Bitnumber2)	// bits in x is set
	andi X, (0xff & (0<<Bitnumber1 | 0<<Bitnumber2) ) // bits in x is cleared

	With this method also several bits of a register can be at the same time set and reset.

	DDRA  &= ~( (1<<PA0) | (1<<PA3) );	/* PA0 and PA3 as inputs */
	PORTA |=  (1<<PA0) | (1<<PA3);		/* internal Pull UP for both switch on */


* Test if bits are set
	Assembly:
	retest:
		sbis	xxx,number
		rjmp	retest
	
	C:
		while( xxx & (1<<number))
		{};


* Measurement units

	m = *10^-3
	u = *10^-6
	n = *10^-9
	p = *10^-12
	f = *10^-15


* 












---------------------------------------------------LTIB------------------------------------------- 


* Configure the arm cross compiler environment
	$ export CROSS_COMPILE=arm-none-linux-gnueabi-
	$ export PATH=/opt/freescale/usr/local/gcc-4.1.2-glibc-2.5-nptl-3/arm-none-linux-gnueabi/bin:$PATH
	$ export PATH=/home/ning/ltib/patch/bin:$PATH
  
  Write it in the home profile script for every shells
	$ /home/ning/.profile

* LTIB building process

	By default, rpm will unpack, configure, build, install and remove all sources in one step. 
	This is a deleberate feature to make sure a package is fully rebuilt from prestine sources plus 
	patches in a consistent way. Obviously, if one is trying to work on a package, 
	this scheme is not helpful. Following is the rpm short-circuited builds/installs option to 
	circumvent this trouble:

	a. Unpack the sources and apply all current patches:
		$ ./ltib -m prep -p <package>
	b. Edit/delete under rpm/build/<package>
	c. Build the package with:
		$ ./ltib -m scbuild -p <package>
	d. Once the package builds successfully, check the install phase:
		$ ./ltib -m scinstall -p <package>
	e. Test your package before committing the changes:
		$ ./ltib -m scdeploy -p <package>
	f. Repeat steps a->e until you are satisfied with youir results.	
	g. Generate a patch and update the spec file
		$ ./ltib -m patchmerge -p <package>
	h. Manually clean up the patch file (as required).
	i. Build from scratch and install
		$ ./ltib -p <package>
	j. Once you are happy with all your changes, commit the patch to GPP
		$ cvs commit dist/lfs-5.1/<package>/<package>.spec


* Check LTIB package configured
	$ ./ltib -m listpkgs

* Clean the LTIB and reconfigure
	$ ./ltib -m distclean
	$ ./ltib -m config
		select different modules


* MX35 internal NAND boot

	MX35 distinguishes between internal boot and external boot. External boot means the CPU fetches the 
	first instruction directly from the boot medium. Internal boot means the first instruction is fetched 
	from internal ROM code. 
	The ROM code requires specific header structure in the boot medium to continue boot.

	The only boot media for external boot are:
	- NOR flash (WEIM)
	- NAND flash

	Using internal boot all boot media can be used:
	- NOR flash (WEIM)
	- NAND flash
	- SPI NOR
	- SD Card
	- etc

	Advantage of internal boot is that if internal boot fails the bootstrap in ROM automatically polls 
	USB (if connected) or UART and expects serial boot using Advanced Tool Kit. 
	For example an empty flash will be detected and one can use serial boot to program the boot 
	medium w/o changing any boot config or burning fuses.

	Freescale BSP supports the following boot modes (Linux):
	- NOR flash (WEIM) using external boot
	- NAND flash using external boot
	- SPI NOR using internal boot
	- SD card using internal boot

	The following flow explains how to generate u-boot boot loader to boot from NAND flash using internal boot.
	Required SW version: use SDK1004 or later.

	On Linux Host:

	1. Prepare u-boot source tree
		$ cd ltib
		$./ltib -m prep -p u-boot

	2. patch the u-boot source file:
		$ gedit rpm/BUILD/u-boot-2009.08/include/configs/mx35_3stack.h

		Add the following lines starting at line 35:

			#define CONFIG_FLASH_HEADER     1
			#define CONFIG_FLASH_HEADER_OFFSET 0x400
			#define CONFIG_FLASH_HEADER_BARKER 0xB1

	3. complete build of  u-boot.bin
		$ ./ltib -m scbuild -p u-boot
		$ ./ltib -m scdeploy -p u-boot

	4. Create new u-boot-int.bin using attached script
		$ cd
		$ mkdir mx35_internal_nandboot
		$ cd mx35_internal_nandboot
		$ ll ~/ltib/rootfs/boot/u-boot.bin
		$ cp ~/ltib/rootfs/boot/u-boot.bin .
	
	5. Flash u-boot-int.bin to MX35PDK using Advanced Tool Kit with the same settings as for external boot:
		Note: if USB is connected you must select USB as transport in ATK. Else choose UART COM1 or so.
			x Erase , address range: 0-0x80000000 BBT
			x Program address: 0x0000000 BBT File: u-boot.bin

	6. Boot u-boot using internal boot mode:
		Console (Hyperterm or Teraterm) should deliver:

		U-Boot 2009.08 (Jul 06 2010 - 10:16:40)

		CPU:   Freescale i.MX35 at 532 MHz
		Board: MX35 3STACK 2.0 [POR]
		I2C:   ready
		DRAM:  128 MB
		Flash: 64 MB
		NAND:  Manufacturer      : Samsung (0xec)
		Device Code       : 0xd5
		Cell Technology   : MLC
		Chip Size         : 2 GiB
		Pages per Block   : 128
		Page Geometry     : 2048+64
		ECC Strength      : 4 bits
		ECC Size          : 512 B
		Data Setup Time   : 20 ns
		Data Hold Time    : 15 ns
		Address Setup Time: 20 ns
		GPMI Sample Delay : 6 ns
		tREA              : Unknown
		tRLOH             : Unknown
		tRHOH             : Unknown
		Description       : K9LAG08U0M K9HBG08U1M K9GAG08U0M
		Bad block table found at page 1048448, version 0x01
		Bad block table found at page 1048320, version 0x01
		2048 MiB
		*** Warning - bad CRC or NAND, using default environment

		In:    serial
		Out:   serial
		Err:   serial
		PMIC@0x08:0x7 is 41d0
		i.MX35 CPU board version 2.0
		Net:   smc911x-0, FEC0
		Hit any key to stop autoboot:  0
		MX35 U-Boot >


* Recompile the LTIB linux kernel
	$ make distclean
	$ make ARCH=arm imx5_defconfig menuconfig CROSS_COMPILE=arm-none-linux-gnueabi-
		In menuconfig, enable:
			"Kernel Hacking"=>"Kernel Debugging"=>"Kernel low-level debugging function (new)"
			"Device Driver"=>"Network device support"=>"Phy device support and infrustructure"=>"Drivers for National Semiconductors PHYs"
			"Device Driver"=>"Network device support"=>"Ethernet (10 or 100Mbit)"=>"FEC ethernet controller"
			
	$ make ARCH=arm uImage CROSS_COMPILE=arm-none-linux-gnueabi-
	


* If there is a error looks like:
	......
	cc1: error: unrecognized command line option "-mlittle-endian"
	cc1: error: unrecognized command line option "-mapcs
  
	Means the shell can not find the cross compile tools, mine is arm-linux-uclibc-XXXX
	then I found that, although I have add the needed export the variable into .bashrc:
	but forgot to close the terminal and restrat it to let the environment variable to take effect,
	so close and restart the termina



* If errors like:
	...libfreetype.so: could not read symbols: File in wrong format
	collect2: ld returned 1 exit status

  	Happens, edit the file
		dist/lfs-5.1/fontconfig/fontconfig.spec
	In said .spec file, you will need to modify the line which calls ./configure to add this:
		--with-freetype-config="$DEV_IMAGE/usr/bin/freetype-config --prefix=$DEV_IMAGE/usr"

* If errors like:
	configure: error: Could not find a glib-genmarshal in your PATH

  	Install libglib2.0-dev package.


* If errors like:
	makestrs.c:33:21: error: X11/Xos.h: No such file or directory

  	Install x11proto-core-dev package.

* If errors like:
	/bin/bash: dbus-binding-tool: command not found

	Install libdbus-glib-1-dev package.

* If errors like:
	/bin/bash: no: command not found

	Remove the gtk+ folder first, and install libgtk2.0-dev package.

* If errors like:
	make[8]: *** No rule to make target `/usr/bin/orbit-idl-2', needed by `orbit-interface.h'.  Stop.

	a. Install liborbit2-dev package.
	b. Enter ltib/rpm/BUILD/gst-fsl-plugin-1.7.1, and run:
		$ ./autogen.sh

* If errors like:
	configure: error: Your intltool is too old.  You need intltool 0.35.0 or later.

	Install intltool again.

* If errors like:
	htmlurl.c:100: undefined reference to `__isoc99_sscanf'

	There is a typo error in gtkhtml-3.24.2/htmlurl/htmlurl.c line 29, remove it.

	And remove line -I$(includedir) from the file gtkhtml-3.24.2/htmlurl/Makefile.in
		@@ -384,7 +384,6 @@
		 INCLUDES = \
		 	-I$(top_srcdir)			\
		 	-I$(srcdir)			\
		-	-I$(includedir)			\
		 	$(GTKHTML_CFLAGS)		\
		 	$(SOUP_CFLAGS)			\
		 	$(I18N_LIB_CFLAGS)		\	

* If errors like:
	/usr/bin/ld: cannot find -lXtst

	Install libxtst-dev package.

* If errors like:
	configure: error: cannot run /bin/bash ./config.sub

	Install libtool package.
* Start X11




----------------------------------------------UBOOT-------------------------------------------------

* UBoot ethloop patch usage to do ethernet loop test
	$ mii w 1 0 7100		<-- sets PHY into loopback mode
	$ ethloop
	$ mii w 1 0 8000		<-- PHY reset after test is completed


* Valid MAC address

	You have to buy a block of 4096 MAC addresses (IAB = Individual Address Block) or a block of 16M MAC 
	addresses (OUI = Organizationally Unique Identifier, also referred to as 'company id') from IEEE 
	Registration Authority. The current cost of an IAB is $550.00, the cost of an OUI is $1,650.00. 
	See http://standards.ieee.org/regauth/oui/index.shtml 

	You can buy Eproms containing MAC addresses from: Maxim or Microchip. 

	You can set the "locally administered" bit to make your own MAC address (no guarantee of uniqueness, 
	but pretty good odds if you don't do something dumb). Universally administered and locally administered 
	addresses are distinguished by setting the second least significant bit of the most significant byte of 
	the address. If the bit is 0, the address is universally administered. If it is 1, the address is 
	locally administered. The bit is 0 in all OUIs. For example, 02-00-00-00-00-01. The most significant 
	byte is 02h. The binary is 00000010 and the second least significant bit is 1. 
	Therefore, it is a locally administered address. 

	In U-Boot, you can use the "gen_eth_addr" tool to generate a random "locally administered" MAC address. 
	Here are the needed commands: 
		$ make tools/gen_eth_addr
		$ cc tools/gen_eth_addr.c -o tools/gen_eth_addr
		$ tools/gen_eth_addr
		$ ba:d0:4a:9c:4e:ce



* Recompile the UBOOT
	$ make distclean
	$ make mx35_gh_10inch_config
	$ make






--------------------------------------------HARDWARE GENERAL----------------------------------------
 
* Nand Flash page size
	Nand flash is distinguished by two page size: 512B/P and 2048B/p, u-boot need judge which type of nand 
	is in use so the nand_read_ll can adjust to different nand type reading/writing.



	
-----------------------------------------------Environment------------------------------------------

* Add environmental variable to the script
	for ning user, edit /home/ning/.profile and add:

	# for arm cross compile
	CROSS_COMPILE=arm-none-linux-gnueabi-
	PATH=/opt/freescale/usr/local/gcc-4.1.2-glibc-2.5-nptl-3/arm-none-linux-gnueabi/bin:$PATH
	PATH=/usr/local/qt-linux-version/bin:$PATH
	PATH=/usr/local/qt-target-version/bin:$PATH
	PATH=/home/ning/ltib/patch/bin/:$PATH

	for "root" user, edit /root/.bashrc and add:

	export CROSS_COMPILE=arm-none-linux-gnueabi-
	export PATH=/opt/freescale/usr/local/gcc-4.1.2-glibc-2.5-nptl-3/arm-none-linux-gnueabi/bin:$PATH
	export PATH=/usr/local/qt-linux-version/bin:$PATH
	export PATH=/usr/local/qt-target-version/bin:$PATH
	export PATH=/home/ning/ltib/patch/bin:$PATH

	need to relogin to take effect.
	

----------------------------------------------------QT-----------------------------------------------


* Build the embedded QT linux for ARM
	
	1. Download the newest QT Everywhere opensource package and Ensure to compile using root for success.

	2. Configure linux version using the following
		$ ./configure -static -prefix /usr/local/qt-linux-version

	3. Configure using linux-arm-none-gnueabi-g++ toolchain, building static arm version
		$ ./configure -static -embedded arm -xplatform qws/linux-arm-gnueabi-g++ -release -prefix /usr/local/qt-target-version -qt-gfx-linuxfb -qt-kbd-tty -qt-mouse-tslib -little-endian -host-little-endian -I/usr/local/tslib/include -L/usr/local/tslib/lib

	3. Make and make install
		$ make
		$ su -c "make install"

		If error like:
			The tslib functionality test failed!
 				You might need to modify the include and library search paths by editing
				QMAKE_INCDIR and QMAKE_LIBDIR in /home/ning/qt-everywhere-opensource-src-4.8.2/mkspecs/qws/linux-arm-gnueabi-g++/qmake.conf
			
			just add:
				QMAKE_INCDIR = /usr/local/tslib/include                 
				QMAKE_LIBDIR = /usr/local/tslib/lib

	4. Environment in target
		$ export PATH=/usr/local/Trolltech/Qt-target-version/bin:$PATH

	5. 



-----------------------------------------------------TSLIB-----------------------------------------------
* Build Tslib 1.4
	0. $ make clean
	1. $ echo "ac_cv_func_malloc_0_nonnull=yes" > arm-linux.autogen
	2. $ export ac_cv_func_malloc_0_nonnull=yes
	3. $ export CC=/opt/freescale/usr/local/gcc-4.1.2-glibc-2.5-nptl-3/arm-none-linux-gnueabi/bin/arm-none-linux-gnueabi-gcc
	4. $ export CXX=/opt/freescale/usr/local/gcc-4.1.2-glibc-2.5-nptl-3/arm-none-linux-gnueabi/bin/arm-none-linux-gnueabi-g++
	5. $ export CONFIG_SITE=arm-linux.autogen
	6. $ ./autogen.sh
	7. $ ./configure CC=arm-none-linux-gnueabi-gcc CXX=arm-none-linux-gnueabi-g++ -prefix=/usr/local/tslib -host=arm-linux
	8. $ make
	9. $ make install

	10. If error like:
		C++ cannot compiler cannot create excutables

		make sure the compiler is in path.

* Add the environmental variable for tslib
	1. Edit /root/.bashrc or /etc/profile, add:

	export TSLIB_ROOT=/usr/local/tslib
	export TSLIB_TSDEVICE=/dev/input/event0
	export TSLIB_CALIBFILE=/etc/pointercal
	export TSLIB_CONFFILE=/usr/local/tslib/etc/ts.conf
	export TSLIB_PLUGINDIR=/usr/local/tslib/lib/ts
	export TSLIB_CONSOLEDEVICE=none
	export TSLIB_FBDEVICE=/dev/fb0

	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/tslib/lib:/usr/local/lib
	export QWS_MOUSE_PROTO=Tslib

	2. Copy all /usr/local/tslib to target /usr/local/tslib, and edit the target /usr/local/tslib/etc/ts.conf
		uncomment the first line to:
			module_raw input (make sure that the module is the first character of this line)


-----------------------------------------------------USB-----------------------------------------------

* Manually mount USB device
	$ modprobe ehci-hcd
	
	you will find the proper usb device name after the usb detection.

	$ mount -t msdos /dev/sda /mnt/usb

* Automatically mount USB at bootup
	a. Enable the Linux kernel configuration option "Device Driver" => "USB support" => "EHCI (HCD) USB2.0";
	a. Enable the "Package List" => "Device Node" => "Include automount rules" in the LTIB building configuration, 
		this will add "65-automount.ruls" under "/etc/udev/rules.d/" folder;
	b. Change the Linux kernel configuration option "CONFIG_UEVENT_HELPER_PATH" from "/sbin/hotplug" to "";
	c. If the "/etc/inittab" invokes "/etc/rcS" and the "sysconfig.spec" file is correct, the udev should start automatically.

	If errors like:
		udevd[1164]:init_udevd_socket: error getting socket: Address family not supported by protocol
		error initializing udevd socket
		udevd[1164]: main: error initializing udevd socket

	Then, enable "Unix Domain Sockets" option under "Networking Support" => "Networking Options".


-----------------------------------------------------TFTP-----------------------------------------------

* The tftp belong to xinetd service. The xinetd is configured using /etc/xinetd.conf and each service is configured
	through the folder /etc/xinetd.d, for TFTP, the content looks like:
		service tftp
		{
			 disable = no
			 socket_type = dgram
			 protocol = udp
			 port = 69
			 wait = yes
			 user = root
			 server = /usr/sbin/in.tftpd
			 server_args = /tftpboot
			 flags = IPv4
		}

* Start the TFTP through xinetd
	$ /etc/init.d/xinetd restart

-----------------------------------------------------NFS-----------------------------------------------

* 
	$ /etc/init.d/xinetd restart

------------------------------------------------Tools-----------------------------------------------------

* Install ADT 1.7
	[1] Directly install the ADT1.7 install exe after wine setup.
	[2] Settings:
		IMX35_AO2
		MDDR
		COM0
		(The download dip setting on the IMX35 board is: 1-off, 2-on)

* Minicom
	[1] Run minicom setup
		$ minicom -s

